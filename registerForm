import React from "react";
import { Row, Col, Button, Form } from "react-bootstrap";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useFormik } from "formik";
import * as userService from "../../services/userService";
import * as Yup from "yup";
function RegisterForm(props) {
  const validationSchema = Yup.object({
    firstName: Yup.string()
      .min(3, "Must be at least 3 characters")
      .max(15, "Max is 15 characters")
      .required("First Name is required"),
    lastName: Yup.string()
      .min(3, "Must be at least 3 characters")
      .max(15, "Max is 15 characters")
      .required("Last Name is required"),
    email: Yup.string()
      .email()
      .min(3, "Must be at least 3 characters")
      .max(60, "Max is 60 characters")
      .required("Email is required"),
    password: Yup.string()
      .min(3, "Must be at least 3 characters")
      .max(15, "Max is 15 characters")
      .required("Password is required"),
    confirmPassword: Yup.string()
      .min(3, "Must be at least 3 characters")
      .max(15, "Max is 15 characters")
      .required("Confirm Password is required"),
  });
  const formik = useFormik({
    initialValues: {
      firstName: "",
      lastName: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
    validationSchema: validationSchema,
    onSubmit: async (values) => {
      if (values.password === values.confirmPassword) {
        const user = {
          firstName: values.firstName,
          lastName: values.lastName,
          email: values.email,
          password: values.password,
          confirmPassword: values.confirmPassword,
        };
        const data = await userService.addUser(user);
        if (data) {
          if (data.data == "User Exists!") {
            toast.error("User Exists, Make a New Account or Sign In!");
          } else {
            props.toggleSwitch();
          }
        }
      } else {
        toast.error("Cannot Add User, Contact Site Admin");
      }
    },
  });
  return (
    <Row className="m-5">
      <Col className="col-md-12">
        <h3 className="text-center">Register</h3>
        <Form onSubmit={formik.handleSubmit}>
          <Form.Group>
            <Form.Label>First Name</Form.Label>
            <Form.Control
              type="text"
              name="firstName"
              onChange={formik.handleChange}
              value={formik.values.firstName}
              placeholder="Enter First Name"
            />
            {formik.errors.firstName}
          </Form.Group>
          <Form.Group>
            <Form.Label>Last Name</Form.Label>
            <Form.Control
              type="text"
              name="lastName"
              onChange={formik.handleChange}
              value={formik.values.lastName}
              placeholder="Enter Last Name"
            />
            {formik.errors.lastName}
          </Form.Group>
          <Form.Group controlId="formBasicEmail">
            <Form.Label>Email Address</Form.Label>
            <Form.Control
              type="email"
              name="email"
              onChange={formik.handleChange}
              value={formik.values.email}
              placeholder="Enter Email"
            />
            {formik.errors.email}
            <Form.Text className="text-muted">
              We'll never share your email with anyone else.
            </Form.Text>
          </Form.Group>

          <Form.Group controlId="formBasicPassword">
            <Form.Label>Password</Form.Label>
            <Form.Control
              type="password"
              name="password"
              onChange={formik.handleChange}
              value={formik.values.password}
              placeholder="Password"
            />
            {formik.errors.password}
          </Form.Group>
          <Form.Group controlId="formBasicPassword">
            <Form.Label>Confirm Password</Form.Label>
            <Form.Control
              type="password"
              name="confirmPassword"
              onChange={formik.handleChange}
              value={formik.values.confirmPassword}
              placeholder="Confirm Password"
            />
            {formik.errors.confirmPassword}
          </Form.Group>
          <Button variant="primary" type="submit">
            Submit
          </Button>
        </Form>
        <ToastContainer />
      </Col>
    </Row>
  );
}

export default RegisterForm;
