import React from "react";
import * as orderService from "../../../../services/orderService";
import VendorCard from "./VendorCards";
import { toast } from "react-toastify";
import { Formik } from "formik";
import Pagination from "rc-pagination";
import "rc-pagination/assets/index.css";
import localInfo from "rc-pagination/lib/locale/en_US";
import orderSchema from "../../../../schemas/orderSchema";
class VenderOrderContainer extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      orderInfo: [],
      formData: {
        productSearch: "",
        dateSearch: "",
      },
      totalCount: "",
      pageSize: "",
      currentPage: "",
      pageType: "ByVendor",
    };
  }

  componentDidMount() {
    orderService
      .getVendorOrders(10, 0)
      .then(this.onSuccess)
      .catch(this.onFailure);
  }

  onSuccess = (response) => {
    var orders = response.item.pagedItems;
    var total = response.item.totalCount;
    var pSize = response.item.pageSize;
    var pIndex = response.item.pageIndex;
    this.setState(() => {
      return {
        orderInfo: orders.map(this.mapCards),
        totalCount: total,
        pageSize: pSize,
        currentPage: pIndex,
        pageType: "ByVendor",
      };
    });
  };
  onDateAndProductSuccess = (response) => {
    var orders = response.item.pagedItems;
    var total = response.item.totalCount;
    var pSize = response.item.pageSize;
    var pIndex = response.item.pageIndex;
    this.setState(() => {
      return {
        orderInfo: orders.map(this.mapCards),
        totalCount: total,
        pageSize: pSize,
        currentPage: pIndex,
        pageType: "DateAndProduct",
      };
    });
  };
  onProductSuccess = (response) => {
    var orders = response.item.pagedItems;
    var total = response.item.totalCount;
    var pSize = response.item.pageSize;
    var pIndex = response.item.pageIndex;
    this.setState(() => {
      return {
        orderInfo: orders.map(this.mapCards),
        totalCount: total,
        pageSize: pSize,
        currentPage: pIndex,
        pageType: "ByProduct",
      };
    });
  };
  onDateSuccess = (response) => {
    var orders = response.item.pagedItems;
    var total = response.item.totalCount;
    var pSize = response.item.pageSize;
    var pIndex = response.item.pageIndex;
    this.setState(() => {
      return {
        orderInfo: orders.map(this.mapCards),
        totalCount: total,
        pageSize: pSize,
        currentPage: pIndex,
        pageType: "ByDate",
      };
    });
  };
  onFailure = (err) => {
    toast.error("Could not retrieve orders. Check Your Search.");
    this.setState(() => {
      return {
        orderInfo: [],
        totalCount: "",
        pageSize: "",
        currentPage: "",
      };
    });
  };
  mapCards = (order) => {
    return <VendorCard order={order} key={Math.random()} />;
  };

  handleSubmit = (values) => {
    this.setState({ formData: { ...values } });
    if (values.productSearch !== "" && values.dateSearch !== "") {
      orderService
        .getVendorByDateAndProduct(
          10,
          0,
          values.productSearch,
          values.dateSearch
        )
        .then(this.onDateAndProductSuccess)
        .catch(this.onFailure);
    } else if (values.dateSearch === "") {
      orderService
        .getVendorByProduct(10, 0, values.productSearch)
        .then(this.onProductSuccess)
        .catch(this.onFailure);
    } else if (values.productSearch === "") {
      orderService
        .getVendorByDate(10, 0, values.dateSearch)
        .then(this.onDateSuccess)
        .catch(this.onFailure);
    } else {
      return null;
    }
  };
  pageChange = (current, pageSize) => {
    let pSize = pageSize;
    let pIndex = current - 1;
    if (this.state.pageType === "DateAndProduct") {
      orderService
        .getVendorByDateAndProduct(
          pSize,
          pIndex,
          this.state.formData.productSearch,
          this.state.formData.dateSearch
        )
        .then(this.onDateAndProductSuccess)
        .catch(this.onFailure);
    } else if (this.state.pageType === "ByProduct") {
      orderService
        .getVendorByProduct(pSize, pIndex, this.state.formData.productSearch)
        .then(this.onProductSuccess)
        .catch(this.onFailure);
    } else if (this.state.pageType === "ByDate") {
      orderService
        .getVendorByDate(pSize, pIndex, this.state.formData.dateSearch)
        .then(this.onDateSuccess)
        .catch(this.onFailure);
    } else if (this.state.pageType === "ByVendor") {
      orderService
        .getVendorOrders(pSize, pIndex)
        .then(this.onSuccess)
        .catch(this.onFailure);
    }
  };
  render() {
    return (
      <React.Fragment>
        <Formik
          enableReinitialize={true}
          initialValues={this.state.formData}
          onSubmit={this.handleSubmit}
          validationSchema={orderSchema}
        >
          {(props) => {
            const {
              values,
              touched,
              errors,
              handleSubmit,
              handleChange,
            } = props;
            return (
              <div
                classname="container"
                style={{ marginTop: "10rem", width: "auto" }}
              >
                <div className="text-center d-flex justify-content-center">
                  <form action="" className="row" onSubmit={handleSubmit}>
                    <div
                      classname="input-group mb-3"
                      style={{
                        marginRight: "2rem",
                      }}
                    >
                      <div classname="input-group-prepend">
                        <span
                          classname="input-group-text"
                          id="inputGroup-sizing-default"
                        >
                          Search By Product
                        </span>
                      </div>
                      <input
                        name="productSearch"
                        type="text"
                        values={values.productSearch}
                        onChange={handleChange}
                        placeholder="Product Search"
                        autoComplete="off"
                        className={
                          errors.productSearch && touched.productSearch
                            ? "form-control is-invalid"
                            : "form-control"
                        }
                      />
                      {errors.productSearch && touched.productSearch && (
                        <span className="input-feedback">
                          {errors.productSearch}
                        </span>
                      )}
                    </div>
                    <div classname="input-group mb-3">
                      <div classname="input-group-prepend">
                        <span
                          classname="input-group-text"
                          id="inputGroup-sizing-default"
                        >
                          Search By Date
                        </span>
                      </div>
                      <input
                        name="dateSearch"
                        type="date"
                        values={values.dateSearch}
                        onChange={handleChange}
                        placeholder="Coupon Code"
                        autoComplete="off"
                        className={
                          errors.dateSearch && touched.dateSearch
                            ? "form-control is-invalid"
                            : "form-control"
                        }
                      />
                      {errors.dateSearch && touched.dateSearch && (
                        <span className="input-feedback">
                          {errors.dateSearch}
                        </span>
                      )}
                    </div>
                    <div className="input-group mb-3">
                      <button className="btn-primary" type="submit">
                        {" "}
                        Search
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            );
          }}
        </Formik>
        <div>{this.state.orderInfo}</div>
        <Pagination
          total={this.state.totalCount}
          pageSize={this.state.pageSize}
          onChange={this.pageChange}
          current={this.state.currentPage}
          locale={localInfo}
          style={{ margin: "auto", color: "#ab8ce4", borderColor: "#ab8ce4" }}
          className="col-sm-3"
        />
      </React.Fragment>
    );
  }
}

export default VenderOrderContainer;
